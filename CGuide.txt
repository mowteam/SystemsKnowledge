Pointers vs Arrays:
-char buffer[N] is different than char * buffer
-arrays represent the actual data, where as pointers represent a pointer that points to the array
-when passing buffers as arguments to methods, they are treated as pointers, so arrays and pointers can be indexed and referenced the same
-the main difference is that buffers are stored where they are created, which has an effect on global variables and the size of stack frames
-char ** environ (pointer to char pointer) is correct not char * environ[] (array of pointers)


Undefined number of arguments in a method:
-reference SEED book format string vuln section
-this is how printf is implemented
-use va_list.h
-va_list ap;
-va_start(ap, first_arg); #create argument list
-va_arg(ap, var_type) #increment argument list
-va_end(ap) #close (not strictly necessary)


Socket Programming:
-refer to pwn.college and https://www.binarytides.com/socket-programming-c-linux-tutorial/
-socket(AF_INET, SOCK_STREAM, 0); #returns fd. IP_v4, TCP, and IP protocol

Server-Side:
-bind(int sockfd, struct sockaddr *addr, socklen_t addrlen); #returns error code. sockaddr: AF_INET, port, IP address (struct), {0}
-listen(int sockfd, int backlog); #begins listening on socket
-accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen); #extracts first connection from listening socket or waits until a connection is received. Works for connection based transport protocols. returns a new fd representing a new connected socket
-recv(int sockfd, const void *buf, size_t len , int flags) #returns -1 on error or the number of bytes received. Can use read instead

Client-Side:
-connect(int sockfd, struct sockaddr * server, socklen_t addrlen) #returns error number
-send(int sockfd, const void *buf, size_t len, int flags) #returns -1 on error or the number of bytes sent. Can use write instead


Piping:
-reference https://w3.cs.jmu.edu/kirkpams/OpenCSF/Books/csf/html/Pipes.html (many other references online) and pipe man page
-a traditional pipe is unnamed pipe and only lasts as long as the process/until the file descriptors are closed. Useful for communication between child processes
-use pipe() to create a pipe attached to two fd
-fork() and use dup2() to transfer the pipe's read end to stdin
-delete the unused file descriptors, you can safely delete the pipe read end once dup2() is called
-a pipe whose read or write end has been closed is considered widowed
-a process writing to a widowed pipe will received SIGPIPE signal
-reading from a widowed pipe will receive an EOF and any buffered data that still exists on the pipe
-Note on read syscall: read pauses until N bytes are read or EOF is read/received. In the context of pipes and FIFOs, read will block indefinitely until something is written (assuming the pipe is not widowed)
-Note:stdin and stdout are permission sensitive, file descriptor cannot be both read and write

FIFO:
-reference https://www.geeksforgeeks.org/named-pipe-fifo-example-c-program/
-a named pipe that can last beyond the life of a process. Useful for ad hoc communication
-FIFOs are a special type of file that discard data once it has been read
-create using mkfifo() syscall
-when opening the write-side of a FIFO, the process will block until the read-side is opened (another process opens the FIFO with read permissions), so make sure to open read-side of FIFO before the write side
-A pipe or FIFO has to be open at both ends simultaneously when performing IO operations
-beware weird I/O blocking errors can occur
-writing and reading will block until another process performs the corresponding action

I/O Blocking:
-pipes and FIFO have the same IO blocking semantics

